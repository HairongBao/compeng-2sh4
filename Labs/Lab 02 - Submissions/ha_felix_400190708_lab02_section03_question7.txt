#include <stdio.h>

void addEff(int val1[], int val2[], int val3[],int pos1[], int pos2[],int pos3[],int k1, int k2)
{

    int numNonZero = k2 + k1; // number of non zeros NOT ACCOUNING FOR WHEN ADD TO 0
    int count = 0;
    int sameCount = 0;


    for (int i = 0; i < numNonZero; i++){
        pos3[i] = 0;
        val3[i] = 0;
    }


    int sumOfVec = 0; // stores the sums of vectors;

    for (int i = 0; i < k1; i++){ // vector 1
        for (int j = 0; j < k2; j++){ // vector 2
            if (pos1[i] == pos2[j]){
                sumOfVec = val1[i]+val2[j];
                if (sumOfVec != 0){
                    val3[count] = sumOfVec;
                    pos3[count] = pos1[i];
                    count++;
                    sumOfVec = 0;
                }

            }


        }
}
    int maxDupe = count; // get the maximimum duplications

    for (int i = 0; i  < k1; i++) { // vector 1
        int isUnique = 1;
        for (int j = 0; j < maxDupe; j++){
            if (pos1[i] == pos3[j]){ // checks if duplicate number
                isUnique = 0;
                break;
            }
        }
        if (pos3[count] == 0 && isUnique == 1){
                    pos3[count] += pos1[i]; // sets the value of the sum position at the intial position to the value
                    val3[count] += val1[i];
                    count++;
                }
            }

     for (int i = 0; i  < k2; i++) { // vector 1
        int isUnique = 1;
        for (int j = 0; j < maxDupe; j++){
            if (pos2[i] == pos3[j]){ // checks if duplicate number
                isUnique = 0;
                break;
            }
        }
        if (pos3[count] == 0 && isUnique == 1){
                    pos3[count] += pos2[i]; // sets the value of the sum position at the intial position to the value
                    val3[count] += val2[i];
                    count++;
                }
            }

// BUBBLE SORT
int temp = 0;
int temp2 = 0;

        for (int i = 0; i < count-1; i++)
        {

            for (int j = i+1; j < count; j++)
            {

                if (pos3[i] > pos3[j])
                {

                    temp =  val3[i];
                    temp2 = pos3[i];

                    val3[i] = val3[j];
                    pos3[i] = pos3[j];

                    val3[j] = temp;
                    pos3[j] = temp2;

                }

            }

        }


for (int i = 0; i < 4; i++){
        printf("%d ", val3[i]);


    }
    printf("\n");

        for (int i = 0; i < 4; i++){
        printf("%d ", pos3[i]);
    }


}

    // reuse the reconstruct from part 6

int main()
{
    int val3[4]; // added vector
    int pos3[4];

    int val1[] = {99, 67, -20};
    int pos1[] = {1, 2, 4};

    int val2[] = {1, 2, 20};
    int pos2[] = {2, 3, 4};

    int k2 = 3; // # of non zero element of vector 2
    int k1 = 3; // # of non zero element of vector 1


    addEff(val1,val2,val3,pos1,pos2,pos3,k1,k2);


}
